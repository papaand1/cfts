AWSTemplateFormatVersion: 2010-09-09
Description: Creates a VPC with public and private subnets
Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: QA    
    AllowedValues:
    - Prod
    - Dev
    - QA   
  EmployeeID:
    Description: EmployeeID
    Type: String
    Default: cherif    
  EmployeeContact:
    Description: Contact of the Employee 
    Type: String
    Default: teeyah02@live.com    
  LOB:
    Description: Line of business
    Type: String
    Default: DBA    
    AllowedValues:
    - DBA
    - DEVOPS
    - SYSADMIN
    - CLOUD    
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: cft    
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t1.micro
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium 
    ConstraintDescription: must be a valid and allowed EC2 instance type.    
  SSHLocation: 
    Description: Subnet allowed to ssh on TCP to public subnet
    Type: String    
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/0-28
    Default: 0.0.0.0/0
    MinLength: '9'
    MaxLength: '18'
  VPCACIDR:
    Description: CIDR of VPC with some useful service tools
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 192.168.101.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.     
  VPCBCIDR:
    Description: CIDR of VPC with some useful service tools
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 192.168.102.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.    
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    m1.small:
      Arch: HVM64
    m1.medium:
      Arch: HVM64
    m1.large:
      Arch: HVM64
    m1.xlarge:
      Arch: HVM64
    m2.xlarge:
      Arch: HVM64
    m2.2xlarge:
      Arch: HVM64
    m2.4xlarge:
      Arch: HVM64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    c1.medium:
      Arch: HVM64
    c1.xlarge:
      Arch: HVM64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    g2.2xlarge:
      Arch: HVMG2
    g2.8xlarge:
      Arch: HVMG2
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
  AWSInstanceType2NATArch:
    t1.micro:
      Arch: NATHVM64
    t2.nano:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64
    t2.medium:
      Arch: NATHVM64
    t2.large:
      Arch: NATHVM64
    m1.small:
      Arch: NATHVM64
    m1.medium:
      Arch: NATHVM64
    m1.large:
      Arch: NATHVM64
    m1.xlarge:
      Arch: NATHVM64
    m2.xlarge:
      Arch: NATHVM64
    m2.2xlarge:
      Arch: NATHVM64
    m2.4xlarge:
      Arch: NATHVM64
    m3.medium:
      Arch: NATHVM64
    m3.large:
      Arch: NATHVM64
    m3.xlarge:
      Arch: NATHVM64
    m3.2xlarge:
      Arch: NATHVM64
    m4.large:
      Arch: NATHVM64
    m4.xlarge:
      Arch: NATHVM64
    m4.2xlarge:
      Arch: NATHVM64
    m4.4xlarge:
      Arch: NATHVM64
    m4.10xlarge:
      Arch: NATHVM64
    c1.medium:
      Arch: NATHVM64
    c1.xlarge:
      Arch: NATHVM64
    c3.large:
      Arch: NATHVM64
    c3.xlarge:
      Arch: NATHVM64
    c3.2xlarge:
      Arch: NATHVM64
    c3.4xlarge:
      Arch: NATHVM64
    c3.8xlarge:
      Arch: NATHVM64
    c4.large:
      Arch: NATHVM64
    c4.xlarge:
      Arch: NATHVM64
    c4.2xlarge:
      Arch: NATHVM64
    c4.4xlarge:
      Arch: NATHVM64
    c4.8xlarge:
      Arch: NATHVM64
    g2.2xlarge:
      Arch: NATHVMG2
    g2.8xlarge:
      Arch: NATHVMG2
    r3.large:
      Arch: NATHVM64
    r3.xlarge:
      Arch: NATHVM64
    r3.2xlarge:
      Arch: NATHVM64
    r3.4xlarge:
      Arch: NATHVM64
    r3.8xlarge:
      Arch: NATHVM64
    i2.xlarge:
      Arch: NATHVM64
    i2.2xlarge:
      Arch: NATHVM64
    i2.4xlarge:
      Arch: NATHVM64
    i2.8xlarge:
      Arch: NATHVM64
    d2.xlarge:
      Arch: NATHVM64
    d2.2xlarge:
      Arch: NATHVM64
    d2.4xlarge:
      Arch: NATHVM64
    d2.8xlarge:
      Arch: NATHVM64
    hi1.4xlarge:
      Arch: NATHVM64
    hs1.8xlarge:
      Arch: NATHVM64
    cr1.8xlarge:
      Arch: NATHVM64
    cc2.8xlarge:
      Arch: NATHVM64
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0080e4c5bc078760e
      HVMG2: ami-0aeb704d503081ea6
    us-west-2:
      HVM64: ami-01e24be29428c15b2
      HVMG2: ami-0fe84a5b4563d8f27
    us-west-1:
      HVM64: ami-0ec6517f6edbf8044
      HVMG2: ami-0a7fc72dc0e51aa77
    us-east-2:
      HVM64: ami-0cd3dfa4e37921605
      HVMG2: NOT_SUPPORTED 
Resources:
  # PUBLIC VPC
  VPCA:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCACIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-test-VPC'
        - Key: EmployeeID
          Value: !Sub '${EmployeeID}'  
        - Key: EmployeeContact
          Value: !Sub '${EmployeeContact}' 
        - Key: LOB
          Value: !Sub '${LOB}'           
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: 192.168.101.0/28
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPCA
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-public-subnet'     
        - Key: EmployeeID
          Value: !Sub '${EmployeeID}'  
        - Key: EmployeeContact
          Value: !Sub '${EmployeeContact}' 
        - Key: LOB
          Value: !Sub '${LOB}'         
  InternetGatewayA:
    Type: AWS::EC2::InternetGateway
  AttachGatewayA:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGatewayA
      VpcId: !Ref VPCA
  PublicRouteTableA:
    DependsOn: AttachGatewayA
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCA
  PublicDefaultRouteA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGatewayA
      RouteTableId: !Ref PublicRouteTableA
  PublicRouteAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableA
      SubnetId: !Ref PublicSubnetA 
  # PUBLIC VPC SECURITY GROUPS    
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPCA
      GroupDescription: ssh access to the instance
      GroupName: 'Ec2PublicSubnet'
      SecurityGroupIngress:
        - CidrIp: !Ref SSHLocation
          IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-SG-EC2'    
        - Key: EmployeeID
          Value: !Sub '${EmployeeID}'  
        - Key: EmployeeContact
          Value: !Sub '${EmployeeContact}' 
        - Key: LOB
          Value: !Sub '${LOB}'           
  WebserverSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'    
    Properties:
      VpcId: !Ref VPCA
      GroupDescription: 'webserver access'
      GroupName: 'webserversubnet'      
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'          
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-SG-RDS'
        - Key: EmployeeID
          Value: !Sub '${EmployeeID}'  
        - Key: EmployeeContact
          Value: !Sub '${EmployeeContact}' 
        - Key: LOB
          Value: !Sub '${LOB}'  
  # PUBLIC VPC INSTANCES
  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
        - !Ref WebserverSecurityGroup        
      KeyName: !Ref KeyName
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch      
      SubnetId: !Ref PublicSubnetA      
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          useradd cherif
          echo "P@ssW0rd" | passwd cherif --stdin
          echo "#granting user cherif root privileges" >> /etc/sudoers
          echo "cherif  ALL=(ALL)       NOPASSWD: ALL" >> /etc/sudoers
          sed -i "s/.*PasswordAuthentication.*/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          service sshd restart
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-EC2'
        - Key: EmployeeID
          Value: !Sub '${EmployeeID}'  
        - Key: EmployeeContact
          Value: !Sub '${EmployeeContact}' 
        - Key: LOB
          Value: !Sub '${LOB}'            
      
  #VPC with the private subnet      
  VPCB:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCBCIDR      
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-test-VPC'
        - Key: EmployeeID
          Value: !Sub '${EmployeeID}'  
        - Key: EmployeeContact
          Value: !Sub '${EmployeeContact}' 
        - Key: LOB
          Value: !Sub '${LOB}'          
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: 192.168.102.1/28
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPCB
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-private-subnet'  
        - Key: EmployeeID
          Value: !Sub '${EmployeeID}'  
        - Key: EmployeeContact
          Value: !Sub '${EmployeeContact}' 
        - Key: LOB
          Value: !Sub '${LOB}'  
  InternetGatewayB:
    Type: AWS::EC2::InternetGateway
  AttachGatewayB:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGatewayB
      VpcId: !Ref VPCB
  PublicRouteTableB:
    DependsOn: AttachGatewayB
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCB
  PublicDefaultRouteB:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGatewayB
      RouteTableId: !Ref PublicRouteTableB 
  #PEERING VPC      
  myVPCPeeringConnection:
    Type: 'AWS::EC2::VPCPeeringConnection'
    Properties:
      VpcId: !Ref VPCA
      PeerVpcId: !Ref VPCB
  PeeringRoute1StandardtoServicePrivateAZ1:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: !Ref VPCBCIDR
      RouteTableId: !Ref PrivateRouteTableAZ1
      VpcPeeringConnectionId: !Ref myVPCPeeringConnection      
  # PRIVATE VPC SECURITY GROUPS    
  PrivateInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPCB
      GroupDescription: ssh access to the instance
      GroupName: 'Ec2AccessSubnet'
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref InstanceSecurityGroup
          IpProtocol: tcp
          FromPort: '10101'
          ToPort: '10101'          
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-SG-EC2'    
        - Key: EmployeeID
          Value: !Sub '${EmployeeID}'  
        - Key: EmployeeContact
          Value: !Sub '${EmployeeContact}' 
        - Key: LOB
          Value: !Sub '${LOB}'
  # PRIVATE VPC INSTANCES
  PrivateEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !Ref PrivateInstanceSecurityGroup
      KeyName: !Ref KeyName
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch      
      SubnetId: !Ref PrivateSubnetB      
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          #yum update -y
          useradd cherif
          echo "P@ssW0rd" | passwd cherif --stdin
          echo "#granting user cherif root privileges" >> /etc/sudoers
          echo "cherif  ALL=(ALL)       NOPASSWD: ALL" >> /etc/sudoers
          sed -i "s/.*PasswordAuthentication.*/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          service sshd restart
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-EC2'
        - Key: EmployeeID
          Value: !Sub '${EmployeeID}'  
        - Key: EmployeeContact
          Value: !Sub '${EmployeeContact}' 
        - Key: LOB
          Value: !Sub '${LOB}'       
Outputs:
  WebserverSecurityGroup:
    Description: A reference to the security group for DB host
    Value: !Ref WebserverSecurityGroup
  InstanceSecurityGroup:
    Description: A reference to the security group EC2
    Value: !Ref InstanceSecurityGroup  
  VPCA:
    Description: A reference to the VPC
    Value: !Ref VPCA 
  PublicSubnetA:
    Description: A reference to the public subnet
    Value: !Ref PublicSubnetA
  PrivateSubnetB:
    Description: A reference to the private subnet
    Value: !Ref PrivateSubnetB 
