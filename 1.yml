AWSTemplateFormatVersion: 2010-09-09
Description: Creates a VPC with public and private subnets
Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    AllowedValues:
    - Prod
    - Dev
    - QA   
  EmployeeID:
    Description: EmployeeID
    Type: String
  EmployeeContact:
    Description: Contact of the Employee 
    Type: String
  LOB:
    Description: Line of business
    Type: String
    AllowedValues:
    - DBA
    - DEVOPS
    - SYSADMIN
    - CLOUD    
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t1.micro
    - t2.micro
    - t2.small
    - t2.medium 
    ConstraintDescription: must be a valid and allowed EC2 instance type.    
  SSHLocation: 
    Description: Subnet allowed to ssh on TCP to public subnet
    Type: String    
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/0-28
    Default: 0.0.0.0/0
    MinLength: '9'
    MaxLength: '18'
  DBName:
    Default: MyDatabase
    Description: The database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBUser:
    NoEcho: 'true'
    Description: The database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBPassword:
    NoEcho: 'true'
    Description: The database admin account password
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.    
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
  AWSInstanceType2NATArch:
    t1.micro:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64
    t2.medium:
      Arch: NATHVM64
    t2.large:
      Arch: NATHVM64
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0080e4c5bc078760e
      HVMG2: ami-0aeb704d503081ea6
    us-west-2:
      HVM64: ami-01e24be29428c15b2
      HVMG2: ami-0fe84a5b4563d8f27
    us-west-1:
      HVM64: ami-0ec6517f6edbf8044
      HVMG2: ami-0a7fc72dc0e51aa77
    us-east-2:
      HVM64: ami-0cd3dfa4e37921605
      HVMG2: NOT_SUPPORTED 
Resources:
# VPC resource creation
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.101.0/24
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-test-VPC'
        - Key: EmployeeID
          Value: !Sub '${EmployeeID}'  
        - Key: EmployeeContact
          Value: !Sub '${EmployeeContact}' 
        - Key: LOB
          Value: !Sub '${LOB}'           
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: 192.168.101.0/28
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-public-subnet'     
        - Key: EmployeeID
          Value: !Sub '${EmployeeID}'  
        - Key: EmployeeContact
          Value: !Sub '${EmployeeContact}' 
        - Key: LOB
          Value: !Sub '${LOB}'           
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: 192.168.101.32/28
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-private-subnet'  
        - Key: EmployeeID
          Value: !Sub '${EmployeeID}'  
        - Key: EmployeeContact
          Value: !Sub '${EmployeeContact}' 
        - Key: LOB
          Value: !Sub '${LOB}'           
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicRouteTable:
    DependsOn: AttachGateway
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
  PublicRouteAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: ssh access to the instance
      GroupName: 'Ec2PublicSubnet'
      SecurityGroupIngress:
        - CidrIp: !Ref SSHLocation
          IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-SG-EC2'    
        - Key: EmployeeID
          Value: !Sub '${EmployeeID}'  
        - Key: EmployeeContact
          Value: !Sub '${EmployeeContact}' 
        - Key: LOB
          Value: !Sub '${LOB}'           
  DBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'    
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Access to the DB from EC2
      GroupName: 'DBPrivateSubnet'      
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref InstanceSecurityGroup
          IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'          
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-SG-RDS'
        - Key: EmployeeID
          Value: !Sub '${EmployeeID}'  
        - Key: EmployeeContact
          Value: !Sub '${EmployeeContact}' 
        - Key: LOB
          Value: !Sub '${LOB}'
#public Ec2 instance          
  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      KeyName: !Ref KeyName
      #ImageId: 'ami-0dd387866de2504e4'
      IamInstanceProfile: !Ref SESAccessInstanceProfile
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch      
      SubnetId: !Ref PublicSubnetA      
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          useradd cherif
          echo "P@ssW0rd" | passwd cherif --stdin
          echo "#granting user cherif root privileges" >> /etc/sudoers
          echo "cherif  ALL=(ALL)       NOPASSWD: ALL" >> /etc/sudoers
          sed -i "s/.*PasswordAuthentication.*/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          service sshd restart
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-EC2'
        - Key: EmployeeID
          Value: !Sub '${EmployeeID}'  
        - Key: EmployeeContact
          Value: !Sub '${EmployeeContact}' 
        - Key: LOB
          Value: !Sub '${LOB}'
  MyDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Subnets available for the RDS DB Instance
      SubnetIds: 
        - !Ref 'PrivateSubnetA'      
        - !Ref 'PublicSubnetA'        
# Musql DB        
  MyDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: 'test-mysql'
      DBName: !Ref 'DBName'
      AllocatedStorage: '5'
      DBInstanceClass: db.t2.small
      Engine: MySQL
      EngineVersion: 5.7.25
      MasterUsername: !Ref 'DBUser'
      MasterUserPassword: !Ref 'DBPassword'
      DBSubnetGroupName: !Ref 'MyDBSubnetGroup'      
      VPCSecurityGroups:  
        - !Ref 'DBSecurityGroup'         
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-RDS'
        - Key: EmployeeID
          Value: !Sub '${EmployeeID}'  
        - Key: EmployeeContact
          Value: !Sub '${EmployeeContact}' 
        - Key: LOB
          Value: !Sub '${LOB}' 
  SESAccessInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref SESAccessRole
  SESAccessPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: SESAccessPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: 'ses:*'
            Resource: '*'
      Roles:
        - !Ref SESAccessRole
  SESAccessRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /          
          
Outputs:
  DBSecurityGroup:
    Description: A reference to the security group for DB host
    Value: !Ref DBSecurityGroup
  InstanceSecurityGroup:
    Description: A reference to the security group EC2
    Value: !Ref InstanceSecurityGroup  
  VPC:
    Description: A reference to the VPC
    Value: !Ref VPC 
  PublicSubnetA:
    Description: A reference to the public subnet
    Value: !Ref PublicSubnetA
  PrivateSubnetA:
    Description: A reference to the private subnet
    Value: !Ref PrivateSubnetA 
  JDBCConnectionString:
    Description: JDBC connection string for the database
    Value: !Join ['', ['jdbc:mysql://', !GetAtt [MyDB, Endpoint.Address], ':', !GetAtt [
          MyDB, Endpoint.Port], /, !Ref 'DBName']]