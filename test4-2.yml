AWSTemplateFormatVersion: 2010-09-09
Description: Auto scaling deploy example
Parameters:
  AvailabilityZone:
    Type: String
    Default: us-east-1a
  AvailabilityZoneB:
    Type: String
    Default: us-east-1b    
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t1.micro
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium 
    ConstraintDescription: must be a valid and allowed EC2 instance type.   
  VPCACIDR:
    Description: CIDR of VPC with some useful service tools
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 192.168.0.0/28
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.    
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
  AWSInstanceType2NATArch:
    t1.micro:
      Arch: NATHVM64
    t2.nano:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64
    t2.medium:
      Arch: NATHVM64
    t2.large:
      Arch: NATHVM64
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0080e4c5bc078760e
      HVMG2: ami-0aeb704d503081ea6
    us-west-2:
      HVM64: ami-01e24be29428c15b2
      HVMG2: ami-0fe84a5b4563d8f27
    us-west-1:
      HVM64: ami-0ec6517f6edbf8044
      HVMG2: ami-0a7fc72dc0e51aa77
    us-east-2:
      HVM64: ami-0cd3dfa4e37921605
      HVMG2: NOT_SUPPORTED    
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: -Ref VPCACIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC
  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        Ref: AvailabilityZone
      CidrBlock: 192.168.2.0/24
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: PublicA
  PublicSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone:
        Ref: AvailabilityZoneB
      CidrBlock: 192.168.1.0/24
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: PublicB          
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: Public
  OutboundConnectionRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnetA
  PublicSubnetRouteTableAssociationB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnetB       
  WebServerSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: Allows inbound http traffic
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      Tags:
        - Key: Name
          Value: http
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      LoadBalancerName: LoadBalancer
      Listeners:
        - InstancePort: 80
          InstanceProtocol: HTTP
          LoadBalancerPort: 80
          Protocol: HTTP
      Scheme: internet-facing
      SecurityGroups:
        - Ref: WebServerSG
      Subnets:
        - Ref: PublicSubnetA
        - Ref: PublicSubnetB                
  AppLaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      AssociatePublicIpAddress: true
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch 
      InstanceType: !Ref InstanceType
      SecurityGroups: []
    DependsOn: VPCGatewayAttachment
  AppASG:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AvailabilityZones:
        - Ref: AvailabilityZone
        - Ref: AvailabilityZoneB        
      DesiredCapacity: 1
      LaunchConfigurationName:
        Ref: AppLaunchConfiguration
      LoadBalancerNames:
        - Ref: LoadBalancer
      MaxSize: 2
      MinSize: 1
      VPCZoneIdentifier:
        - Ref: PublicSubnetA      
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
