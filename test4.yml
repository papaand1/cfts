AWSTemplateFormatVersion: 2010-09-09
Description: Creates a VPC with public and private subnets
Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: QA    
    AllowedValues:
    - Prod
    - Dev
    - QA   
  EmployeeID:
    Description: EmployeeID
    Type: String
    Default: cherif    
  EmployeeContact:
    Description: Contact of the Employee 
    Type: String
    Default: teeyah02@live.com    
  LOB:
    Description: Line of business
    Type: String
    Default: DBA    
    AllowedValues:
    - DBA
    - DEVOPS
    - SYSADMIN
    - CLOUD    
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: cft    
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t1.micro
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium 
    ConstraintDescription: must be a valid and allowed EC2 instance type.    
  SSHLocation: 
    Description: Subnet allowed to ssh on TCP to public subnet
    Type: String    
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/0-28
    Default: 0.0.0.0/0
    MinLength: '9'
    MaxLength: '18'
  VPCACIDR:
    Description: CIDR of VPC with some useful service tools
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 192.168.0.0/16
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x. 
  AvailabilityZone1:
    Type: String
    Default: us-east-1a  
  AvailabilityZone2:
    Type: String
    Default: us-east-1b     
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
  AWSInstanceType2NATArch:
    t1.micro:
      Arch: NATHVM64
    t2.nano:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64
    t2.medium:
      Arch: NATHVM64
    t2.large:
      Arch: NATHVM64
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0080e4c5bc078760e
      HVMG2: ami-0aeb704d503081ea6
    us-west-2:
      HVM64: ami-01e24be29428c15b2
      HVMG2: ami-0fe84a5b4563d8f27
    us-west-1:
      HVM64: ami-0ec6517f6edbf8044
      HVMG2: ami-0a7fc72dc0e51aa77
    us-east-2:
      HVM64: ami-0cd3dfa4e37921605
      HVMG2: NOT_SUPPORTED  
Resources:
  # PUBLIC VPC
  VPCA:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCACIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-test-VPC'
        - Key: EmployeeID
          Value: !Sub '${EmployeeID}'  
        - Key: EmployeeContact
          Value: !Sub '${EmployeeContact}' 
        - Key: LOB
          Value: !Sub '${LOB}'           
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: 192.168.1.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPCA
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-public-subnet'     
        - Key: EmployeeID
          Value: !Sub '${EmployeeID}'  
        - Key: EmployeeContact
          Value: !Sub '${EmployeeContact}' 
        - Key: LOB
          Value: !Sub '${LOB}'     
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone2
      CidrBlock: 192.168.2.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPCA
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-public-subnet'     
        - Key: EmployeeID
          Value: !Sub '${EmployeeID}'  
        - Key: EmployeeContact
          Value: !Sub '${EmployeeContact}' 
        - Key: LOB
          Value: !Sub '${LOB}' 
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: 192.168.3.0/24
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPCA
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-private-subnet'  
        - Key: EmployeeID
          Value: !Sub '${EmployeeID}'  
        - Key: EmployeeContact
          Value: !Sub '${EmployeeContact}' 
        - Key: LOB
          Value: !Sub '${LOB}'  
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone2
      CidrBlock: 192.168.4.0/24
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPCA
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-private-subnet'  
        - Key: EmployeeID
          Value: !Sub '${EmployeeID}'  
        - Key: EmployeeContact
          Value: !Sub '${EmployeeContact}' 
        - Key: LOB
          Value: !Sub '${LOB}'          
  InternetGatewayA:
    Type: AWS::EC2::InternetGateway
  AttachGatewayA:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGatewayA
      VpcId: !Ref VPCA
  PublicRouteTableA:
    DependsOn: AttachGatewayA
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCA
  PublicDefaultRouteA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGatewayA
      RouteTableId: !Ref PublicRouteTableA
  PublicRouteAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableA
      SubnetId: !Ref 'PublicSubnetA'  
  PublicRouteAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableA
      SubnetId: !Ref 'PublicSubnetB'       
  # PUBLIC VPC SECURITY GROUPS    
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPCA
      GroupDescription: ssh access to the instance
      GroupName: 'Ec2PublicSubnet'
      SecurityGroupIngress:
        - CidrIp: !Ref SSHLocation
          IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-SG-EC2'    
        - Key: EmployeeID
          Value: !Sub '${EmployeeID}'  
        - Key: EmployeeContact
          Value: !Sub '${EmployeeContact}' 
        - Key: LOB
          Value: !Sub '${LOB}'           
  WebserverSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'    
    Properties:
      VpcId: !Ref VPCA
      GroupDescription: 'webserver access'
      GroupName: 'webserversubnet'      
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'          
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-SG-RDS'
        - Key: EmployeeID
          Value: !Sub '${EmployeeID}'  
        - Key: EmployeeContact
          Value: !Sub '${EmployeeContact}' 
        - Key: LOB
          Value: !Sub '${LOB}'  
#load balacer
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      LoadBalancerName: LoadBalancer
      Listeners:
        - InstancePort: 80
          InstanceProtocol: HTTP
          LoadBalancerPort: 80
          Protocol: HTTP
      Scheme: internet-facing
      SecurityGroups:
        - !Ref WebserverSecurityGroup
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB        
  AppLaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      AssociatePublicIpAddress: true
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch 
      InstanceType: t2.micro          
      SecurityGroups:
        - !Ref WebserverSecurityGroup
    #DependsOn: VPCGatewayAttachment
  AppASG:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AvailabilityZones: 
        - !Ref AvailabilityZone1
        - !Ref AvailabilityZone2           
      #AvailabilityZones: !GetAZs ''  
      DesiredCapacity: 2
      LaunchConfigurationName:
        Ref: AppLaunchConfiguration
      LoadBalancerNames:
        - Ref: LoadBalancer
      MaxSize: 2
      MinSize: 2
      VPCZoneIdentifier:
        - !Ref PublicSubnetA
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true        
           
Outputs:
  WebserverSecurityGroup:
    Description: A reference to the security group for DB host
    Value: !Ref WebserverSecurityGroup
  InstanceSecurityGroup:
    Description: A reference to the security group EC2
    Value: !Ref InstanceSecurityGroup  
  VPCA:
    Description: A reference to the VPC
    Value: !Ref VPCA 
  PublicSubnetA:
    Description: A reference to the public subnet
    Value: !Ref PublicSubnetA
  PrivateSubnetB:
    Description: A reference to the private subnet
    Value: !Ref PrivateSubnetB 
